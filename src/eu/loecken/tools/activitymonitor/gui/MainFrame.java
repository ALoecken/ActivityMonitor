package eu.loecken.tools.activitymonitor.gui;

import eu.loecken.tools.activitymonitor.TimeSpan;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Andreas@Loecken.eu
 */
public class MainFrame extends JFrame implements ClipboardOwner {

  private static final SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
  private volatile TimeListModel timeList;

  /**
   * Creates new form MainFrame
   */
  public MainFrame() {
    timeList = new TimeListModel(this);
    initComponents();
  }

  public synchronized TimeListModel getTimeList() {
    return timeList;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstTime = new javax.swing.JList();
        btnMerge = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnToggle = new javax.swing.JToggleButton();
        lblTargetTime = new javax.swing.JLabel();
        txtHours = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblCountHours = new javax.swing.JLabel();
        btnCopy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstTime.setModel(timeList);
        lstTime.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstTime);

        btnMerge.setText("Merge (nach unten)");
        btnMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergeActionPerformed(evt);
            }
        });

        btnDelete.setText("LÃ¶schen");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnToggle.setText("Start/Stop");

        lblTargetTime.setText("Angestrebte Zielzeit:");

        txtHours.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setText("Angestrebte Dauer (in Stunden):");

        lblCountHours.setText("Gesamtzeit:");

        btnCopy.setText("kopieren");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHours))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(lblTargetTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMerge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCountHours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTargetTime)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountHours)
                    .addComponent(btnCopy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(btnMerge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    int selectedIndex = lstTime.getSelectedIndex();
    if (selectedIndex >= 0) {
      timeList.remove(timeList.get(selectedIndex));
      Collections.sort(timeList);
    }
  }//GEN-LAST:event_btnDeleteActionPerformed

  private void btnMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeActionPerformed
    int selectedIndex = lstTime.getSelectedIndex();
    if (selectedIndex >= 0 && selectedIndex + 1 < timeList.getSize()) {
      TimeSpan a = timeList.get(selectedIndex);
      TimeSpan b = timeList.get(selectedIndex + 1);
      if (a.merge(b)) {
        timeList.remove(b);
        Collections.sort(timeList);
      }
    }
  }//GEN-LAST:event_btnMergeActionPerformed

  private double getHours() {
    long millis = 0;
    for (TimeSpan t : timeList) {
      millis += t.getMillis();
    }
    return millis / (1000d * 60d * 60d);
  }

  private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
    Clipboard clip = getToolkit().getSystemClipboard();
    String s = String.format("%.10f", getHours());
    StringSelection cont = new StringSelection(s);
    clip.setContents(cont, this);
  }//GEN-LAST:event_btnCopyActionPerformed

  public boolean isRunning() {
    return btnToggle.isSelected();
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMerge;
    private javax.swing.JToggleButton btnToggle;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCountHours;
    private javax.swing.JLabel lblTargetTime;
    private javax.swing.JList lstTime;
    private javax.swing.JTextField txtHours;
    // End of variables declaration//GEN-END:variables

  @Override
  public void lostOwnership(Clipboard clipboard, Transferable contents) {
    // nothing to do...
  }

  @Override
  public void repaint(long time, int x, int y, int width, int height) {
    double hours = getHours();
    this.lblCountHours.setText("Gesamtzeit: " + String.format("%.3f", hours));

    int size = timeList.getSize();
    if (size > 0) {
      TimeSpan lastSpan = timeList.getLast();
      String targetHourText = this.txtHours.getText().replaceAll(",", ".");
      if (targetHourText.length() > 0) {
        double targetHours = 0;
        try {
          targetHours = Double.parseDouble(targetHourText);
        } catch (NumberFormatException ex) {
          Logger.getLogger(MainFrame.class.getName()).log(Level.WARNING, "Could not parse \"{0}\"", targetHourText);
          this.txtHours.setText("");
        } catch (Exception ex) {
          Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, "Could not parse \"" + targetHourText + "\"", ex);
        }
        long millis = lastSpan.getStopMillis() + (long) ((targetHours - hours) * 60d * 60d * 1000d);
        this.lblTargetTime.setText("Angestrebte Zielzeit: " + timeFormat.format(new Date(millis)));
      }
    }
    super.repaint(time, x, y, width, height);
  }
}
